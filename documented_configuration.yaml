version: 3 # version of the file format, do not edit

settings:
  message_repeater:
    # delay, after a setpoint has been sent, before a new attempt is made
    # (in case the device does not acknowledge the change in time)
    repeat_delay_sec: 120
  scheduler:
    # delay, after program has started, before the scheduler is initiated
    init_delay_sec: 20
    # (OPTIONAL) in case a device receives a setpoint different from current scheduled value,
    # the manual mode reset event indicates how long, or on what event, the scheduler must wait before
    # setting back the setpoint to its scheduled value
    #
    # This field may contain (defaults to "setpoint_change"):
    # - An integer value in range [0-24] : this is a duration (number of hours)
    # - "timeslot_change" : this is a date (when current timeslot in active schedule for this device ends,
    #                                even if the setpoint is not changing on next timeslot)
    # - "setpoint_change" : this is a date (when current scheduled setpoint actually changes for this device)
    # - "schedule_change" : this is a date (when a scheduled setpoint of ANY device changes)
    manual_mode_reset_event: setpoint_change
  # (OPTIONAL) detect any new device published on the MQTT broker and
  # add it to the "devices" section of the configuration file
  auto_discovery:
    # one protocol entry for each connexion with a domotic server
  - protocol_name: mqtt_ha
    # a device topic is as follow : [devices_base_topic]/entity_name/[parameter]
    # with devices_base_topic : base topic on which all thermostat devices are published
    devices_base_topic: homeassistant/climate
    # parameter containing a friendly name of the device
    friendly_name_subtopic: friendly_name
    on_current_temp_subtopic: current_temperature # payload : double value
    on_setpoint_subtopic: temperature # payload : double value
    on_state_subtopic: state # payload : 'unavailable' means that the device is not available
    set_setpoint_subtopic: new_setpoint # payload : double value

protocols:
  mqtt:
  - name:   "mqtt_ha"
    user:   "mqtt"          #<-- put your mqtt user name here
    pwd:    "mypasswd"      #<-- put your mqtt password here
    broker: "127.0.0.1"     #<-- put your HA instance hostname or IP address here
    port:   1884            #<-- put your (websocket) mqtt port here
    ssl:    false           #<-- false for a local or unsecure port, true for an SSL secured port
    clean_session: true
    on_ha_status_topic: homeassistant/status

# "devices" section : will be filled by the server if auto_discovery is enabled in settings section
devices:
  - "Room #1":   # Name of the thermostat, as shown in the client app (it may contain any character, including spaces and accents)
      protocol:
        name: 'mqtt_ha' # Do not change (name of the protocol declared in "protocols" section)
        # In the following MQTT topics, 'climate_room_1' is the entity name of the thermostat in domotic server (HA)
        # Each subtopic is paste after device_base_topic to get the full topic
        params:
          device_base_topic: homeassistant/climate/climate_room_1/
          on_current_temp_subtopic: current_temperature # payload : double value
          on_setpoint_subtopic: temperature # payload : double value
          on_state_subtopic: state # payload : 'unavailable' means that the device is not available
          set_setpoint_subtopic: new_setpoint # payload : double value
  - "Room #2":
      ...

# The following section is the interface definition between the server and the client app
# DO NOT CHANGE
remote_control:
  - name: flutter
    protocol:
      name: mqtt_ha
      params:
        # receive_topic: Topic on which the server receives commands sent by a remote client
        #   payload (JSON) :
        #     { "command": cmdname, "params": cmdparams }
        #     where cmdname may be :
        #       "set_setpoint" : change the setpoint of a device
        #           -> cmdparams = {"device_name":str, "setpoint":double}
        #       "set_devices_order" : change the order of devices declaration
        #           -> cmdparams = ["device_name1", "device_name2", ...]
        #       "set_device_name" : change name/alias of device
        #           -> cmdparams = {"old_name":str, "new_name":str}
        #       "set_active_schedule" : change current active schedule
        #           -> cmdparams = {"schedule_name":str}
        #       "delete_schedule" : delete schedule by name/alias
        #           -> cmdparams = {"schedule_name":str}
        #       "set_schedule_name" : change name/alias of schedule
        #           -> cmdparams = {"old_name":str, "new_name":str}
        #       "set_schedule" : change schedule content
        #           -> cmdparams = schedule (see schedule format later in this file)
        #       "set_schedules_order" : change the order of schedules declaration
        #           -> cmdparams = ["schedule_name1", "schedule_name2", ...]
        #       "set_tempset_name" : change the name/alias of a temperature set
        #           -> cmdparams = {"old_name":str, "new_name":str, "schedule_name":str}
        #                          if schedule_name=='' then the temperature set is global
        #       "set_tempsets" : change all temperature sets at once
        #           -> cmdparams = {"temperature_sets":list[temperature_set], "schedule_name":str}
        #                          (see temperature_set format later in this file)
        #                          if schedule_name=='' then the temperature set is global
        receive_topic: heatingcontrol/command
        # send_command_response_topic: topic on which the response of every command is sent
        #   payload (JSON):
        #     { "status":["success","failure"],
        #       "error": {'id':str, "node":str, "node_path":str, "node_key":str, "generic_desc":str}
        #     }
        #     -> 'generic_desc' contains an english description of the error
        #     -> 'node_key' is optional
        #     -> 'id' value can be :
        #        - 'EXCEPTION' : Then "error" also contains the following key(s):
        #                        'error':str
        #        - 'MISSING_FILE' : Then "error" also contains the following key(s):
        #                        'filename':str
        #        - 'BAD_FILE_CONTENT' : Then "error" also contains the following key(s):
        #                        'error':str
        #        - 'MISSING_NODES' : Then "error" also contains the following key(s):
        #                        'missing_children':list[str]
        #        - 'BAD_REFERENCE' : Then "error" also contains the following key(s):
        #                        'reference':str
        #        - 'EXPECTED_LIST' : Then "error" does not contains no more keys
        #        - 'DUPLICATE_UNIQUE_KEY' : Then "error" also contains the following key(s):
        #                        'key':str
        #        - 'EMPTY_LIST' : Then "error" also contains the following key(s):
        #                        'child_node':str
        #        - 'BAD_VALUE' : Then "error" also contains the following key(s):
        #                        'value':str
        #        - 'CIRCULAR_REF' : Then "error" also contains the following key(s):
        #                        'aliases':list[str]
        #        - 'MISSING_VALUE' : Then "error" also contains the following key(s):
        #                        'value':str
        send_command_response_topic: heatingcontrol/on_cmd_response
         # payload (json): list[device], i.e. : [{"name":"device1", "mqttid":"mqttid1"}, {"name":"device2", "mqttid":"mqttid2"}, ...]
        send_devices_topic: heatingcontrol/serverdata/on_devices
        # payload (json): scheduler (see scheduler format later in this file)
        send_scheduler_topic: heatingcontrol/serverdata/on_scheduler
        # send_device_states_base_topic: base topic on which a device status change is sent
        #   The actual topic for a device with unique id <mqttid> is : <send_device_states_base_topic>/<id>
        #   payload (JSON) :
        #     {"current_temp": double, "setpoint": double, "state":str}
        #     state can be 'false' (not available) or 'true' (available)
        send_device_states_base_topic: heatingcontrol/serverdata/devices

scheduler:
  # alias of the current active schedule
  # note : may be set to null if no active schedule
  active_schedule: "Default"

  # (OPTIONAL) global temperature sets
  temperature_sets:
  - alias: "Night"
    # (OPTIONAL) alias to a temperature_set to inherit values from
    inherits: 'other'
    devices:
    - device_name: "Room #1"
      setpoint: 15.0
    - device_name: "Room #2"
      setpoint: 16.0
  - alias: "Day"
    devices:
    - device_name: "Room #1"
      setpoint: 19.0
    - device_name: "Room #2"
      setpoint: 20.0
  
  # Each schedule is composed of sub-schedules, or schedule items
  # Each schedule item defines timeslots with setpoints for a group of devices.
  schedules:
  - alias: "Default"
    # (OPTIONAL) local temperature sets
    temperature_sets:
      ... # same format than global temperature sets
    schedule_items:
      # list of devices that take part of this schedule
    - devices: ["Room #1", "Room #2"]
      # each time_slots_set define time slots and dates
      timeslots_sets:
        # list of dates that may be :
        #  - any week day in ['1', ..., '7']
        #    with 1=Monday, 2=Tuesday, ..., 7=Sunday
        # TBD : add any date in calendar (including date ranges et repeat parameter)
      - dates: ['1','2','3','4','5']
        # time slots for this schedule.
        # note : the first slot begins at 0:00 (start_time is ignored).
        #        the last slot implicitly ends at midnight.
        time_slots:
          # timestamp in ISO 8601 format
        - start_time: '00:00:00'
          # alias of the temperature set.
          # note : the order of search is local sets first then global sets
          temperature_set: "Night"
        - start_time: '06:00:00'
          temperature_set: "Day"
        - start_time: '21:00:00'
          temperature_set: "Night"
      - dates: ['6','7']
        ... # and so on !
